// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.12.4
// source: NoiseHandshakeDevice.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//
//jadx for:
//non numeric portion of version name;
//
//search for this proto:
//1. search for  "connection_lc"
//2. find:
//int connection_lc = v81.getInt("connection_lc", 0);
//v8_3.A02();
//4Ht v1_37 = (4Ht)v8_3.A00;
//v1_37.A01 |= 0x10000;
//v1_37.connection_lc = connection_lc;
//3. x_ref for v1_37.connection_lc
//
//"chatd_connection: created IO streams; sessionId="
type NoiseHandshakeDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FullPhone                  *uint64                         `protobuf:"varint,1,opt,name=FullPhone" json:"FullPhone,omitempty"` //
	Passive                    *int32                          `protobuf:"varint,3,opt,name=Passive" json:"Passive,omitempty"`     // 1: XX, 0: IK
	Struct_5                   *NoiseHandshakeDevice_XStruct_5 `protobuf:"bytes,5,opt,name=Struct_5,json=Struct5" json:"Struct_5,omitempty"`
	Nick                       *string                         `protobuf:"bytes,7,opt,name=Nick" json:"Nick,omitempty"`                                               // XCH_nick
	SessionId                  *uint32                         `protobuf:"fixed32,9,opt,name=SessionId" json:"SessionId,omitempty"`                                   //
	Int_10                     *int32                          `protobuf:"varint,10,opt,name=Int_10,json=Int10" json:"Int_10,omitempty"`                              // 0 force_long_connect, ALI: 1
	NetworkSubType             *int32                          `protobuf:"varint,12,opt,name=NetworkSubType" json:"NetworkSubType,omitempty"`                         // 1:WIFI  111:4g
	Dns                        *NoiseHandshakeDevice_DNS       `protobuf:"bytes,15,opt,name=Dns" json:"Dns,omitempty"`                                                // Beta only
	ConnectionSequenceAttempts *int32                          `protobuf:"varint,16,opt,name=ConnectionSequenceAttempts" json:"ConnectionSequenceAttempts,omitempty"` // Beta only, 1, starts from 1
	SignatureMatch             *int32                          `protobuf:"varint,23,opt,name=SignatureMatch" json:"SignatureMatch,omitempty"`                         // sha1(getPackageInfo.Signature) == `...`
	ConnectionLc               *int32                          `protobuf:"varint,24,opt,name=connection_lc,json=connectionLc" json:"connection_lc,omitempty"`         // every login +1
}

func (x *NoiseHandshakeDevice) Reset() {
	*x = NoiseHandshakeDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NoiseHandshakeDevice_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoiseHandshakeDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoiseHandshakeDevice) ProtoMessage() {}

func (x *NoiseHandshakeDevice) ProtoReflect() protoreflect.Message {
	mi := &file_NoiseHandshakeDevice_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoiseHandshakeDevice.ProtoReflect.Descriptor instead.
func (*NoiseHandshakeDevice) Descriptor() ([]byte, []int) {
	return file_NoiseHandshakeDevice_proto_rawDescGZIP(), []int{0}
}

func (x *NoiseHandshakeDevice) GetFullPhone() uint64 {
	if x != nil && x.FullPhone != nil {
		return *x.FullPhone
	}
	return 0
}

func (x *NoiseHandshakeDevice) GetPassive() int32 {
	if x != nil && x.Passive != nil {
		return *x.Passive
	}
	return 0
}

func (x *NoiseHandshakeDevice) GetStruct_5() *NoiseHandshakeDevice_XStruct_5 {
	if x != nil {
		return x.Struct_5
	}
	return nil
}

func (x *NoiseHandshakeDevice) GetNick() string {
	if x != nil && x.Nick != nil {
		return *x.Nick
	}
	return ""
}

func (x *NoiseHandshakeDevice) GetSessionId() uint32 {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return 0
}

func (x *NoiseHandshakeDevice) GetInt_10() int32 {
	if x != nil && x.Int_10 != nil {
		return *x.Int_10
	}
	return 0
}

func (x *NoiseHandshakeDevice) GetNetworkSubType() int32 {
	if x != nil && x.NetworkSubType != nil {
		return *x.NetworkSubType
	}
	return 0
}

func (x *NoiseHandshakeDevice) GetDns() *NoiseHandshakeDevice_DNS {
	if x != nil {
		return x.Dns
	}
	return nil
}

func (x *NoiseHandshakeDevice) GetConnectionSequenceAttempts() int32 {
	if x != nil && x.ConnectionSequenceAttempts != nil {
		return *x.ConnectionSequenceAttempts
	}
	return 0
}

func (x *NoiseHandshakeDevice) GetSignatureMatch() int32 {
	if x != nil && x.SignatureMatch != nil {
		return *x.SignatureMatch
	}
	return 0
}

func (x *NoiseHandshakeDevice) GetConnectionLc() int32 {
	if x != nil && x.ConnectionLc != nil {
		return *x.ConnectionLc
	}
	return 0
}

type NoiseHandshakeDevice_XStruct_5 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SMB_Android    *int32                                  `protobuf:"varint,1,opt,name=SMB_Android,json=SMBAndroid" json:"SMB_Android,omitempty"` // 0:Personal new 2X6("ANDROID", 0, 0),  10:Biz  new 28J("SMB_ANDROID", 10, 10)
	Ver            *NoiseHandshakeDevice_XStruct_5_Version `protobuf:"bytes,2,opt,name=Ver" json:"Ver,omitempty"`
	Mcc            *string                                 `protobuf:"bytes,3,opt,name=Mcc" json:"Mcc,omitempty"`                       // 460
	Mnc            *string                                 `protobuf:"bytes,4,opt,name=Mnc" json:"Mnc,omitempty"`                       // 001
	AndroidVersion *string                                 `protobuf:"bytes,5,opt,name=AndroidVersion" json:"AndroidVersion,omitempty"` // 9
	Brand          *string                                 `protobuf:"bytes,6,opt,name=Brand" json:"Brand,omitempty"`                   // Xiaomi
	Product        *string                                 `protobuf:"bytes,7,opt,name=Product" json:"Product,omitempty"`               // wayne
	Build          *string                                 `protobuf:"bytes,8,opt,name=Build" json:"Build,omitempty"`                   // PKQ1.180904.001
	Fdid           *string                                 `protobuf:"bytes,9,opt,name=Fdid" json:"Fdid,omitempty"`
	IsBeta         *int32                                  `protobuf:"varint,10,opt,name=IsBeta" json:"IsBeta,omitempty"`    // 1: beta, null:non-beta
	Language       *string                                 `protobuf:"bytes,11,opt,name=Language" json:"Language,omitempty"` // zh
	Locale         *string                                 `protobuf:"bytes,12,opt,name=Locale" json:"Locale,omitempty"`
	Board          *string                                 `protobuf:"bytes,13,opt,name=Board" json:"Board,omitempty"`
}

func (x *NoiseHandshakeDevice_XStruct_5) Reset() {
	*x = NoiseHandshakeDevice_XStruct_5{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NoiseHandshakeDevice_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoiseHandshakeDevice_XStruct_5) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoiseHandshakeDevice_XStruct_5) ProtoMessage() {}

func (x *NoiseHandshakeDevice_XStruct_5) ProtoReflect() protoreflect.Message {
	mi := &file_NoiseHandshakeDevice_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoiseHandshakeDevice_XStruct_5.ProtoReflect.Descriptor instead.
func (*NoiseHandshakeDevice_XStruct_5) Descriptor() ([]byte, []int) {
	return file_NoiseHandshakeDevice_proto_rawDescGZIP(), []int{0, 0}
}

func (x *NoiseHandshakeDevice_XStruct_5) GetSMB_Android() int32 {
	if x != nil && x.SMB_Android != nil {
		return *x.SMB_Android
	}
	return 0
}

func (x *NoiseHandshakeDevice_XStruct_5) GetVer() *NoiseHandshakeDevice_XStruct_5_Version {
	if x != nil {
		return x.Ver
	}
	return nil
}

func (x *NoiseHandshakeDevice_XStruct_5) GetMcc() string {
	if x != nil && x.Mcc != nil {
		return *x.Mcc
	}
	return ""
}

func (x *NoiseHandshakeDevice_XStruct_5) GetMnc() string {
	if x != nil && x.Mnc != nil {
		return *x.Mnc
	}
	return ""
}

func (x *NoiseHandshakeDevice_XStruct_5) GetAndroidVersion() string {
	if x != nil && x.AndroidVersion != nil {
		return *x.AndroidVersion
	}
	return ""
}

func (x *NoiseHandshakeDevice_XStruct_5) GetBrand() string {
	if x != nil && x.Brand != nil {
		return *x.Brand
	}
	return ""
}

func (x *NoiseHandshakeDevice_XStruct_5) GetProduct() string {
	if x != nil && x.Product != nil {
		return *x.Product
	}
	return ""
}

func (x *NoiseHandshakeDevice_XStruct_5) GetBuild() string {
	if x != nil && x.Build != nil {
		return *x.Build
	}
	return ""
}

func (x *NoiseHandshakeDevice_XStruct_5) GetFdid() string {
	if x != nil && x.Fdid != nil {
		return *x.Fdid
	}
	return ""
}

func (x *NoiseHandshakeDevice_XStruct_5) GetIsBeta() int32 {
	if x != nil && x.IsBeta != nil {
		return *x.IsBeta
	}
	return 0
}

func (x *NoiseHandshakeDevice_XStruct_5) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *NoiseHandshakeDevice_XStruct_5) GetLocale() string {
	if x != nil && x.Locale != nil {
		return *x.Locale
	}
	return ""
}

func (x *NoiseHandshakeDevice_XStruct_5) GetBoard() string {
	if x != nil && x.Board != nil {
		return *x.Board
	}
	return ""
}

type NoiseHandshakeDevice_DNS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *int32 `protobuf:"varint,15,opt,name=Config" json:"Config,omitempty"`            // 0, SYSTEM(0), GOOGLE(1), HARDCODED(2), OVERRIDE(3), FALLBACK(4)
	Int_16 *int32 `protobuf:"varint,16,opt,name=Int_16,json=Int16" json:"Int_16,omitempty"` // 0, hardcoded
}

func (x *NoiseHandshakeDevice_DNS) Reset() {
	*x = NoiseHandshakeDevice_DNS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NoiseHandshakeDevice_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoiseHandshakeDevice_DNS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoiseHandshakeDevice_DNS) ProtoMessage() {}

func (x *NoiseHandshakeDevice_DNS) ProtoReflect() protoreflect.Message {
	mi := &file_NoiseHandshakeDevice_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoiseHandshakeDevice_DNS.ProtoReflect.Descriptor instead.
func (*NoiseHandshakeDevice_DNS) Descriptor() ([]byte, []int) {
	return file_NoiseHandshakeDevice_proto_rawDescGZIP(), []int{0, 1}
}

func (x *NoiseHandshakeDevice_DNS) GetConfig() int32 {
	if x != nil && x.Config != nil {
		return *x.Config
	}
	return 0
}

func (x *NoiseHandshakeDevice_DNS) GetInt_16() int32 {
	if x != nil && x.Int_16 != nil {
		return *x.Int_16
	}
	return 0
}

type NoiseHandshakeDevice_XStruct_5_Version struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	V1 *int32 `protobuf:"varint,1,opt,name=V1" json:"V1,omitempty"` // 2
	V2 *int32 `protobuf:"varint,2,opt,name=V2" json:"V2,omitempty"` // 20
	V3 *int32 `protobuf:"varint,3,opt,name=V3" json:"V3,omitempty"` // 206
	V4 *int32 `protobuf:"varint,4,opt,name=V4" json:"V4,omitempty"` // 22
}

func (x *NoiseHandshakeDevice_XStruct_5_Version) Reset() {
	*x = NoiseHandshakeDevice_XStruct_5_Version{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NoiseHandshakeDevice_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoiseHandshakeDevice_XStruct_5_Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoiseHandshakeDevice_XStruct_5_Version) ProtoMessage() {}

func (x *NoiseHandshakeDevice_XStruct_5_Version) ProtoReflect() protoreflect.Message {
	mi := &file_NoiseHandshakeDevice_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoiseHandshakeDevice_XStruct_5_Version.ProtoReflect.Descriptor instead.
func (*NoiseHandshakeDevice_XStruct_5_Version) Descriptor() ([]byte, []int) {
	return file_NoiseHandshakeDevice_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *NoiseHandshakeDevice_XStruct_5_Version) GetV1() int32 {
	if x != nil && x.V1 != nil {
		return *x.V1
	}
	return 0
}

func (x *NoiseHandshakeDevice_XStruct_5_Version) GetV2() int32 {
	if x != nil && x.V2 != nil {
		return *x.V2
	}
	return 0
}

func (x *NoiseHandshakeDevice_XStruct_5_Version) GetV3() int32 {
	if x != nil && x.V3 != nil {
		return *x.V3
	}
	return 0
}

func (x *NoiseHandshakeDevice_XStruct_5_Version) GetV4() int32 {
	if x != nil && x.V4 != nil {
		return *x.V4
	}
	return 0
}

var File_NoiseHandshakeDevice_proto protoreflect.FileDescriptor

var file_NoiseHandshakeDevice_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x4e, 0x6f, 0x69, 0x73, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa8, 0x07, 0x0a,
	0x14, 0x4e, 0x6f, 0x69, 0x73, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x75, 0x6c, 0x6c, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x46, 0x75, 0x6c, 0x6c, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x50, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x12, 0x3a, 0x0a,
	0x08, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x4e, 0x6f, 0x69, 0x73, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x35,
	0x52, 0x07, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x35, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x69, 0x63,
	0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x69, 0x63, 0x6b, 0x12, 0x1c, 0x0a,
	0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x49,
	0x6e, 0x74, 0x5f, 0x31, 0x30, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x49, 0x6e, 0x74,
	0x31, 0x30, 0x12, 0x26, 0x0a, 0x0e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x75, 0x62,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x03, 0x44, 0x6e,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x4e, 0x6f, 0x69, 0x73, 0x65, 0x48,
	0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44,
	0x4e, 0x53, 0x52, 0x03, 0x44, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x41,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x63,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x63, 0x1a, 0xba, 0x03, 0x0a, 0x09, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x5f, 0x35, 0x12, 0x1f, 0x0a, 0x0b, 0x53, 0x4d, 0x42, 0x5f, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x4d, 0x42, 0x41, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x03, 0x56, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x4e, 0x6f, 0x69, 0x73, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f,
	0x35, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x56, 0x65, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x4d, 0x63, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x63, 0x63,
	0x12, 0x10, 0x0a, 0x03, 0x4d, 0x6e, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d,
	0x6e, 0x63, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x6e, 0x64, 0x72,
	0x6f, 0x69, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x42, 0x72, 0x61, 0x6e, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x46, 0x64, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x46, 0x64, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x42, 0x65, 0x74, 0x61, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x49, 0x73, 0x42, 0x65, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x1a, 0x49, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x56, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x56,
	0x31, 0x12, 0x0e, 0x0a, 0x02, 0x56, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x56,
	0x32, 0x12, 0x0e, 0x0a, 0x02, 0x56, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x56,
	0x33, 0x12, 0x0e, 0x0a, 0x02, 0x56, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x56,
	0x34, 0x1a, 0x34, 0x0a, 0x03, 0x44, 0x4e, 0x53, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x15, 0x0a, 0x06, 0x49, 0x6e, 0x74, 0x5f, 0x31, 0x36, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x49, 0x6e, 0x74, 0x31, 0x36, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x3b, 0x70, 0x62,
}

var (
	file_NoiseHandshakeDevice_proto_rawDescOnce sync.Once
	file_NoiseHandshakeDevice_proto_rawDescData = file_NoiseHandshakeDevice_proto_rawDesc
)

func file_NoiseHandshakeDevice_proto_rawDescGZIP() []byte {
	file_NoiseHandshakeDevice_proto_rawDescOnce.Do(func() {
		file_NoiseHandshakeDevice_proto_rawDescData = protoimpl.X.CompressGZIP(file_NoiseHandshakeDevice_proto_rawDescData)
	})
	return file_NoiseHandshakeDevice_proto_rawDescData
}

var file_NoiseHandshakeDevice_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_NoiseHandshakeDevice_proto_goTypes = []interface{}{
	(*NoiseHandshakeDevice)(nil),                   // 0: NoiseHandshakeDevice
	(*NoiseHandshakeDevice_XStruct_5)(nil),         // 1: NoiseHandshakeDevice._struct_5
	(*NoiseHandshakeDevice_DNS)(nil),               // 2: NoiseHandshakeDevice.DNS
	(*NoiseHandshakeDevice_XStruct_5_Version)(nil), // 3: NoiseHandshakeDevice._struct_5.Version
}
var file_NoiseHandshakeDevice_proto_depIdxs = []int32{
	1, // 0: NoiseHandshakeDevice.Struct_5:type_name -> NoiseHandshakeDevice._struct_5
	2, // 1: NoiseHandshakeDevice.Dns:type_name -> NoiseHandshakeDevice.DNS
	3, // 2: NoiseHandshakeDevice._struct_5.Ver:type_name -> NoiseHandshakeDevice._struct_5.Version
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_NoiseHandshakeDevice_proto_init() }
func file_NoiseHandshakeDevice_proto_init() {
	if File_NoiseHandshakeDevice_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_NoiseHandshakeDevice_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoiseHandshakeDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_NoiseHandshakeDevice_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoiseHandshakeDevice_XStruct_5); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_NoiseHandshakeDevice_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoiseHandshakeDevice_DNS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_NoiseHandshakeDevice_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoiseHandshakeDevice_XStruct_5_Version); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_NoiseHandshakeDevice_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_NoiseHandshakeDevice_proto_goTypes,
		DependencyIndexes: file_NoiseHandshakeDevice_proto_depIdxs,
		MessageInfos:      file_NoiseHandshakeDevice_proto_msgTypes,
	}.Build()
	File_NoiseHandshakeDevice_proto = out.File
	file_NoiseHandshakeDevice_proto_rawDesc = nil
	file_NoiseHandshakeDevice_proto_goTypes = nil
	file_NoiseHandshakeDevice_proto_depIdxs = nil
}
