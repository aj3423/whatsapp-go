// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.12.4
// source: Message.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Media_Type int32

const (
	Media_Unknown       Media_Type = 0
	Media_Text          Media_Type = 1
	Media_Skdm          Media_Type = 2
	Media_Image         Media_Type = 3
	Media_Contact       Media_Type = 4
	Media_Url           Media_Type = 6
	Media_Document      Media_Type = 7
	Media_Ptt           Media_Type = 8
	Media_Video         Media_Type = 9
	Media_Contact_Array Media_Type = 13
	Media_Sticker       Media_Type = 26
)

// Enum value maps for Media_Type.
var (
	Media_Type_name = map[int32]string{
		0:  "Unknown",
		1:  "Text",
		2:  "Skdm",
		3:  "Image",
		4:  "Contact",
		6:  "Url",
		7:  "Document",
		8:  "Ptt",
		9:  "Video",
		13: "Contact_Array",
		26: "Sticker",
	}
	Media_Type_value = map[string]int32{
		"Unknown":       0,
		"Text":          1,
		"Skdm":          2,
		"Image":         3,
		"Contact":       4,
		"Url":           6,
		"Document":      7,
		"Ptt":           8,
		"Video":         9,
		"Contact_Array": 13,
		"Sticker":       26,
	}
)

func (x Media_Type) Enum() *Media_Type {
	p := new(Media_Type)
	*p = x
	return p
}

func (x Media_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Media_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_Message_proto_enumTypes[0].Descriptor()
}

func (Media_Type) Type() protoreflect.EnumType {
	return &file_Message_proto_enumTypes[0]
}

func (x Media_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Media_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Media_Type(num)
	return nil
}

// Deprecated: Use Media_Type.Descriptor instead.
func (Media_Type) EnumDescriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{8, 0}
}

type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageUrl        *string `protobuf:"bytes,1,opt,name=messageUrl" json:"messageUrl,omitempty"`
	MimeType          *string `protobuf:"bytes,2,opt,name=mimeType" json:"mimeType,omitempty"`
	Text              []byte  `protobuf:"bytes,3,opt,name=text" json:"text,omitempty"`
	FileHash          []byte  `protobuf:"bytes,4,opt,name=fileHash" json:"fileHash,omitempty"`
	FileLength        *uint32 `protobuf:"varint,5,opt,name=fileLength" json:"fileLength,omitempty"`
	Height            *uint32 `protobuf:"varint,6,opt,name=height" json:"height,omitempty"`
	Width             *uint32 `protobuf:"varint,7,opt,name=width" json:"width,omitempty"`
	MediaKey          []byte  `protobuf:"bytes,8,opt,name=mediaKey" json:"mediaKey,omitempty"`
	EncFileHash       []byte  `protobuf:"bytes,9,opt,name=encFileHash" json:"encFileHash,omitempty"`
	DirectPath        *string `protobuf:"bytes,11,opt,name=directPath" json:"directPath,omitempty"`
	MediaKeyTimestamp *uint32 `protobuf:"varint,12,opt,name=mediaKeyTimestamp" json:"mediaKeyTimestamp,omitempty"`
	Thumbnail         []byte  `protobuf:"bytes,16,opt,name=thumbnail" json:"thumbnail,omitempty"`
	//
	//sidecar:
	//https://github.com/sigalor/whatsapp-web-reveng/blob/master/README.md
	//
	//This step is required only for streamable media, e.g. video and audio.
	//As CBC mode allows to decrypt a data from random offset (block-size aligned),
	//it is possible to play and seek the media without the need to fully download it.
	//That said, we need to generate a sidecar.
	//Do it by signing every [n*64K, (n+1)*64K+16] chunk with macKey,
	//truncating the result to the first 10 bytes.
	//Then combine everything in one piece.
	Sidecar           []byte   `protobuf:"bytes,21,opt,name=sidecar" json:"sidecar,omitempty"` //message_streaming_sidecar sidecar
	FirstScanLength   []uint32 `protobuf:"varint,22,rep,name=firstScanLength" json:"firstScanLength,omitempty"`
	PartialMediaHash  []byte   `protobuf:"bytes,23,opt,name=partialMediaHash" json:"partialMediaHash,omitempty"`
	PartialMediaEHash []byte   `protobuf:"bytes,24,opt,name=partialMediaEHash" json:"partialMediaEHash,omitempty"`
}

func (x *Image) Reset() {
	*x = Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{0}
}

func (x *Image) GetMessageUrl() string {
	if x != nil && x.MessageUrl != nil {
		return *x.MessageUrl
	}
	return ""
}

func (x *Image) GetMimeType() string {
	if x != nil && x.MimeType != nil {
		return *x.MimeType
	}
	return ""
}

func (x *Image) GetText() []byte {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Image) GetFileHash() []byte {
	if x != nil {
		return x.FileHash
	}
	return nil
}

func (x *Image) GetFileLength() uint32 {
	if x != nil && x.FileLength != nil {
		return *x.FileLength
	}
	return 0
}

func (x *Image) GetHeight() uint32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *Image) GetWidth() uint32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *Image) GetMediaKey() []byte {
	if x != nil {
		return x.MediaKey
	}
	return nil
}

func (x *Image) GetEncFileHash() []byte {
	if x != nil {
		return x.EncFileHash
	}
	return nil
}

func (x *Image) GetDirectPath() string {
	if x != nil && x.DirectPath != nil {
		return *x.DirectPath
	}
	return ""
}

func (x *Image) GetMediaKeyTimestamp() uint32 {
	if x != nil && x.MediaKeyTimestamp != nil {
		return *x.MediaKeyTimestamp
	}
	return 0
}

func (x *Image) GetThumbnail() []byte {
	if x != nil {
		return x.Thumbnail
	}
	return nil
}

func (x *Image) GetSidecar() []byte {
	if x != nil {
		return x.Sidecar
	}
	return nil
}

func (x *Image) GetFirstScanLength() []uint32 {
	if x != nil {
		return x.FirstScanLength
	}
	return nil
}

func (x *Image) GetPartialMediaHash() []byte {
	if x != nil {
		return x.PartialMediaHash
	}
	return nil
}

func (x *Image) GetPartialMediaEHash() []byte {
	if x != nil {
		return x.PartialMediaEHash
	}
	return nil
}

type Contact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Vcard *string `protobuf:"bytes,16,opt,name=vcard" json:"vcard,omitempty"`
}

func (x *Contact) Reset() {
	*x = Contact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contact) ProtoMessage() {}

func (x *Contact) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contact.ProtoReflect.Descriptor instead.
func (*Contact) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{1}
}

func (x *Contact) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Contact) GetVcard() string {
	if x != nil && x.Vcard != nil {
		return *x.Vcard
	}
	return ""
}

type ContactArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title *string    `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	List  []*Contact `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
}

func (x *ContactArray) Reset() {
	*x = ContactArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactArray) ProtoMessage() {}

func (x *ContactArray) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactArray.ProtoReflect.Descriptor instead.
func (*ContactArray) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{2}
}

func (x *ContactArray) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *ContactArray) GetList() []*Contact {
	if x != nil {
		return x.List
	}
	return nil
}

//
//[32] 6 string: (6721):
//[0a] 1 string: (20): https://www.bing.com
//[12] 2 string: (20): https://www.bing.com
//[22] 4 string: (61): https://www.bing.com/?form=HPFBBK&ssd=20220814_0700&mkt=zh-HK
//[2a] 5 string: (50): This camouflaged panther chameleon is one of a mul
//[32] 6 string: (4): Info (49 6e 66 6f)
//[50] 10 varint: 0 (0x0)
//[82 01] 16 string: (6547): ff d8 ff e0 00 10 4a 46 49 46 00 01 01 00 00 01 00 01 00 00 ff db 00 43 00 06 04 05 06 05 04 06 ...
//[e8 01] 29 varint: 0 (0x0)
//
//or :
//
//[32] 6 string: (6985):
//[0a] 1 string: (20): https://www.bing.com
//[12] 2 string: (20): https://www.bing.com
//[22] 4 string: (61): https://www.bing.com/?form=HPFBBK&ssd=20220814_0700&mkt=zh-HK
//[2a] 5 string: (50): This camouflaged panther chameleon is one of a mul
//[32] 6 string: (4): Info (49 6e 66 6f)
//[50] 10 varint: 0 (0x0)
//[82 01] 16 string: (6547): ff d8 ff e0 00 10 4a 46 49 46 00 01 01 00 00 01 00 01 00 00 ff db 00 43 00 06 04 05 06 05 04 06 ...
//
//[9a 01] 19 string: (140): /v/t62.36144-24/35204578_832677781476215_8323076411855510632_n.enc?ccb=11-4&oh=01_AVxEiKlu4liXcBUBxQsW2tOUUdel5RHPvJZYq07AyjKIJA&oe=631F8D2A
//[a2 01] 20 string: (32): ...RawBigImg.Sha256
//[aa 01] 21 string: (32): (WTF) f3 1b 0c 6f 4e a7 eb f8 3f 5c c3 a0 91 8c 68 1a 30 9c 8f b8 f4 8b 35 d9 22 ab e5 de d9 15 56 e6
//[b2 01] 22 string: (32): (WTF) f5 fc 37 7b 4d 08 82 b2 02 bc c1 aa b2 d2 2f de 42 64 06 cf 64 06 d8 7c f7 e4 89 ad c4 1e 22 51
//[b8 01] 23 varint: 1660471608 (0x62f8c938)
//[c0 01] 24 varint: 768 (0x300)
//[c8 01] 25 varint: 1366 (0x556)
//
//[e8 01] 29 varint: 0 (0x0)
//
type Url struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data         *string `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Url          *string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	MediaName    *string `protobuf:"bytes,5,opt,name=mediaName" json:"mediaName,omitempty"`
	MediaCaption *string `protobuf:"bytes,6,opt,name=mediaCaption" json:"mediaCaption,omitempty"`
	// sns
	TextColor       *uint32 `protobuf:"fixed32,7,opt,name=textColor" json:"textColor,omitempty"`             // ffffffff
	BackgroundColor *uint32 `protobuf:"fixed32,8,opt,name=backgroundColor" json:"backgroundColor,omitempty"` // ffxxxxxx
	FontStyle       *int32  `protobuf:"varint,9,opt,name=fontStyle" json:"fontStyle,omitempty"`
	Int_10          *int32  `protobuf:"varint,10,opt,name=int_10,json=int10" json:"int_10,omitempty"`
	ThumbImage      []byte  `protobuf:"bytes,16,opt,name=thumbImage" json:"thumbImage,omitempty"`
	// optional
	DirectPath     *string `protobuf:"bytes,19,opt,name=directPath" json:"directPath,omitempty"`
	RawImageHash   []byte  `protobuf:"bytes,20,opt,name=rawImageHash" json:"rawImageHash,omitempty"` // Sha256 of raw big image
	Wtf_32Bytes_21 []byte  `protobuf:"bytes,21,opt,name=wtf_32_bytes_21,json=wtf32Bytes21" json:"wtf_32_bytes_21,omitempty"`
	Wtf_32Bytes_22 []byte  `protobuf:"bytes,22,opt,name=wtf_32_bytes_22,json=wtf32Bytes22" json:"wtf_32_bytes_22,omitempty"`
	Timestamp      *int32  `protobuf:"varint,23,opt,name=timestamp" json:"timestamp,omitempty"`
	ImgHeight      *int32  `protobuf:"varint,24,opt,name=imgHeight" json:"imgHeight,omitempty"`
	ImgWidth       *int32  `protobuf:"varint,25,opt,name=imgWidth" json:"imgWidth,omitempty"`
}

func (x *Url) Reset() {
	*x = Url{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Url) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Url) ProtoMessage() {}

func (x *Url) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Url.ProtoReflect.Descriptor instead.
func (*Url) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{3}
}

func (x *Url) GetData() string {
	if x != nil && x.Data != nil {
		return *x.Data
	}
	return ""
}

func (x *Url) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *Url) GetMediaName() string {
	if x != nil && x.MediaName != nil {
		return *x.MediaName
	}
	return ""
}

func (x *Url) GetMediaCaption() string {
	if x != nil && x.MediaCaption != nil {
		return *x.MediaCaption
	}
	return ""
}

func (x *Url) GetTextColor() uint32 {
	if x != nil && x.TextColor != nil {
		return *x.TextColor
	}
	return 0
}

func (x *Url) GetBackgroundColor() uint32 {
	if x != nil && x.BackgroundColor != nil {
		return *x.BackgroundColor
	}
	return 0
}

func (x *Url) GetFontStyle() int32 {
	if x != nil && x.FontStyle != nil {
		return *x.FontStyle
	}
	return 0
}

func (x *Url) GetInt_10() int32 {
	if x != nil && x.Int_10 != nil {
		return *x.Int_10
	}
	return 0
}

func (x *Url) GetThumbImage() []byte {
	if x != nil {
		return x.ThumbImage
	}
	return nil
}

func (x *Url) GetDirectPath() string {
	if x != nil && x.DirectPath != nil {
		return *x.DirectPath
	}
	return ""
}

func (x *Url) GetRawImageHash() []byte {
	if x != nil {
		return x.RawImageHash
	}
	return nil
}

func (x *Url) GetWtf_32Bytes_21() []byte {
	if x != nil {
		return x.Wtf_32Bytes_21
	}
	return nil
}

func (x *Url) GetWtf_32Bytes_22() []byte {
	if x != nil {
		return x.Wtf_32Bytes_22
	}
	return nil
}

func (x *Url) GetTimestamp() int32 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *Url) GetImgHeight() int32 {
	if x != nil && x.ImgHeight != nil {
		return *x.ImgHeight
	}
	return 0
}

func (x *Url) GetImgWidth() int32 {
	if x != nil && x.ImgWidth != nil {
		return *x.ImgWidth
	}
	return 0
}

type Document struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaUrl          *string `protobuf:"bytes,1,opt,name=mediaUrl" json:"mediaUrl,omitempty"`
	MimeType          *string `protobuf:"bytes,2,opt,name=mimeType" json:"mimeType,omitempty"`
	MediaName         *string `protobuf:"bytes,3,opt,name=mediaName" json:"mediaName,omitempty"`
	MediaHash         []byte  `protobuf:"bytes,4,opt,name=mediaHash" json:"mediaHash,omitempty"`
	MediaSize         *uint32 `protobuf:"varint,5,opt,name=mediaSize" json:"mediaSize,omitempty"`
	Int_6             *int32  `protobuf:"varint,6,opt,name=int_6,json=int6" json:"int_6,omitempty"`
	MediaKey          []byte  `protobuf:"bytes,7,opt,name=mediaKey" json:"mediaKey,omitempty"`
	MediaCaption      *string `protobuf:"bytes,8,opt,name=mediaCaption" json:"mediaCaption,omitempty"`
	MediaEncHash      []byte  `protobuf:"bytes,9,opt,name=mediaEncHash" json:"mediaEncHash,omitempty"`
	DirectPath        *string `protobuf:"bytes,10,opt,name=directPath" json:"directPath,omitempty"`
	MediaKeyTimestamp *uint32 `protobuf:"varint,11,opt,name=mediaKeyTimestamp" json:"mediaKeyTimestamp,omitempty"`
}

func (x *Document) Reset() {
	*x = Document{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Document) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Document) ProtoMessage() {}

func (x *Document) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Document.ProtoReflect.Descriptor instead.
func (*Document) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{4}
}

func (x *Document) GetMediaUrl() string {
	if x != nil && x.MediaUrl != nil {
		return *x.MediaUrl
	}
	return ""
}

func (x *Document) GetMimeType() string {
	if x != nil && x.MimeType != nil {
		return *x.MimeType
	}
	return ""
}

func (x *Document) GetMediaName() string {
	if x != nil && x.MediaName != nil {
		return *x.MediaName
	}
	return ""
}

func (x *Document) GetMediaHash() []byte {
	if x != nil {
		return x.MediaHash
	}
	return nil
}

func (x *Document) GetMediaSize() uint32 {
	if x != nil && x.MediaSize != nil {
		return *x.MediaSize
	}
	return 0
}

func (x *Document) GetInt_6() int32 {
	if x != nil && x.Int_6 != nil {
		return *x.Int_6
	}
	return 0
}

func (x *Document) GetMediaKey() []byte {
	if x != nil {
		return x.MediaKey
	}
	return nil
}

func (x *Document) GetMediaCaption() string {
	if x != nil && x.MediaCaption != nil {
		return *x.MediaCaption
	}
	return ""
}

func (x *Document) GetMediaEncHash() []byte {
	if x != nil {
		return x.MediaEncHash
	}
	return nil
}

func (x *Document) GetDirectPath() string {
	if x != nil && x.DirectPath != nil {
		return *x.DirectPath
	}
	return ""
}

func (x *Document) GetMediaKeyTimestamp() uint32 {
	if x != nil && x.MediaKeyTimestamp != nil {
		return *x.MediaKeyTimestamp
	}
	return 0
}

type Ptt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageUrl        *string `protobuf:"bytes,1,opt,name=messageUrl" json:"messageUrl,omitempty"`
	MimeType          *string `protobuf:"bytes,2,opt,name=mimeType" json:"mimeType,omitempty"`
	FileHash          []byte  `protobuf:"bytes,3,opt,name=fileHash" json:"fileHash,omitempty"`
	FileLength        *uint32 `protobuf:"varint,4,opt,name=fileLength" json:"fileLength,omitempty"`
	MediaDuration     *uint32 `protobuf:"varint,5,opt,name=mediaDuration" json:"mediaDuration,omitempty"`
	Origin            *uint32 `protobuf:"varint,6,opt,name=origin" json:"origin,omitempty"` 
	MediaKey          []byte  `protobuf:"bytes,7,opt,name=mediaKey" json:"mediaKey,omitempty"`
	EncFileHash       []byte  `protobuf:"bytes,8,opt,name=encFileHash" json:"encFileHash,omitempty"`
	DirectPath        *string `protobuf:"bytes,9,opt,name=directPath" json:"directPath,omitempty"`
	MediaKeyTimestamp *uint32 `protobuf:"varint,10,opt,name=mediaKeyTimestamp" json:"mediaKeyTimestamp,omitempty"` //optional string                   = 18; // Mac ? not sure
}

func (x *Ptt) Reset() {
	*x = Ptt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ptt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ptt) ProtoMessage() {}

func (x *Ptt) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ptt.ProtoReflect.Descriptor instead.
func (*Ptt) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{5}
}

func (x *Ptt) GetMessageUrl() string {
	if x != nil && x.MessageUrl != nil {
		return *x.MessageUrl
	}
	return ""
}

func (x *Ptt) GetMimeType() string {
	if x != nil && x.MimeType != nil {
		return *x.MimeType
	}
	return ""
}

func (x *Ptt) GetFileHash() []byte {
	if x != nil {
		return x.FileHash
	}
	return nil
}

func (x *Ptt) GetFileLength() uint32 {
	if x != nil && x.FileLength != nil {
		return *x.FileLength
	}
	return 0
}

func (x *Ptt) GetMediaDuration() uint32 {
	if x != nil && x.MediaDuration != nil {
		return *x.MediaDuration
	}
	return 0
}

func (x *Ptt) GetOrigin() uint32 {
	if x != nil && x.Origin != nil {
		return *x.Origin
	}
	return 0
}

func (x *Ptt) GetMediaKey() []byte {
	if x != nil {
		return x.MediaKey
	}
	return nil
}

func (x *Ptt) GetEncFileHash() []byte {
	if x != nil {
		return x.EncFileHash
	}
	return nil
}

func (x *Ptt) GetDirectPath() string {
	if x != nil && x.DirectPath != nil {
		return *x.DirectPath
	}
	return ""
}

func (x *Ptt) GetMediaKeyTimestamp() uint32 {
	if x != nil && x.MediaKeyTimestamp != nil {
		return *x.MediaKeyTimestamp
	}
	return 0
}

type Video struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageUrl        *string `protobuf:"bytes,1,opt,name=messageUrl" json:"messageUrl,omitempty"`
	MimeType          *string `protobuf:"bytes,2,opt,name=mimeType" json:"mimeType,omitempty"`
	FileHash          []byte  `protobuf:"bytes,3,opt,name=fileHash" json:"fileHash,omitempty"`
	FileLength        *uint32 `protobuf:"varint,4,opt,name=fileLength" json:"fileLength,omitempty"`
	MediaDuration     *uint32 `protobuf:"varint,5,opt,name=mediaDuration" json:"mediaDuration,omitempty"` // in seconds
	MediaKey          []byte  `protobuf:"bytes,6,opt,name=mediaKey" json:"mediaKey,omitempty"`
	Text              []byte  `protobuf:"bytes,7,opt,name=text" json:"text,omitempty"`
	Height            *uint32 `protobuf:"varint,9,opt,name=height" json:"height,omitempty"`
	Width             *uint32 `protobuf:"varint,10,opt,name=width" json:"width,omitempty"`
	EncFileHash       []byte  `protobuf:"bytes,11,opt,name=encFileHash" json:"encFileHash,omitempty"`
	DirectPath        *string `protobuf:"bytes,13,opt,name=directPath" json:"directPath,omitempty"`
	MediaKeyTimestamp *uint32 `protobuf:"varint,14,opt,name=mediaKeyTimestamp" json:"mediaKeyTimestamp,omitempty"`
	Thumbnail         []byte  `protobuf:"bytes,16,opt,name=thumbnail" json:"thumbnail,omitempty"`
	Sidecar           []byte  `protobuf:"bytes,18,opt,name=sidecar" json:"sidecar,omitempty"` //message_streaming_sidecar sidecar
}

func (x *Video) Reset() {
	*x = Video{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Video) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Video) ProtoMessage() {}

func (x *Video) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Video.ProtoReflect.Descriptor instead.
func (*Video) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{6}
}

func (x *Video) GetMessageUrl() string {
	if x != nil && x.MessageUrl != nil {
		return *x.MessageUrl
	}
	return ""
}

func (x *Video) GetMimeType() string {
	if x != nil && x.MimeType != nil {
		return *x.MimeType
	}
	return ""
}

func (x *Video) GetFileHash() []byte {
	if x != nil {
		return x.FileHash
	}
	return nil
}

func (x *Video) GetFileLength() uint32 {
	if x != nil && x.FileLength != nil {
		return *x.FileLength
	}
	return 0
}

func (x *Video) GetMediaDuration() uint32 {
	if x != nil && x.MediaDuration != nil {
		return *x.MediaDuration
	}
	return 0
}

func (x *Video) GetMediaKey() []byte {
	if x != nil {
		return x.MediaKey
	}
	return nil
}

func (x *Video) GetText() []byte {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Video) GetHeight() uint32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *Video) GetWidth() uint32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *Video) GetEncFileHash() []byte {
	if x != nil {
		return x.EncFileHash
	}
	return nil
}

func (x *Video) GetDirectPath() string {
	if x != nil && x.DirectPath != nil {
		return *x.DirectPath
	}
	return ""
}

func (x *Video) GetMediaKeyTimestamp() uint32 {
	if x != nil && x.MediaKeyTimestamp != nil {
		return *x.MediaKeyTimestamp
	}
	return 0
}

func (x *Video) GetThumbnail() []byte {
	if x != nil {
		return x.Thumbnail
	}
	return nil
}

func (x *Video) GetSidecar() []byte {
	if x != nil {
		return x.Sidecar
	}
	return nil
}

type Sticker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageUrl        *string `protobuf:"bytes,1,opt,name=messageUrl" json:"messageUrl,omitempty"`
	FileHash          []byte  `protobuf:"bytes,2,opt,name=fileHash" json:"fileHash,omitempty"`
	EncFileHash       []byte  `protobuf:"bytes,3,opt,name=encFileHash" json:"encFileHash,omitempty"`
	MediaKey          []byte  `protobuf:"bytes,4,opt,name=mediaKey" json:"mediaKey,omitempty"`
	MimeType          *string `protobuf:"bytes,5,opt,name=mimeType" json:"mimeType,omitempty"`
	Width             *uint32 `protobuf:"varint,6,opt,name=width" json:"width,omitempty"`
	Height            *uint32 `protobuf:"varint,7,opt,name=height" json:"height,omitempty"`
	DirectPath        *string `protobuf:"bytes,8,opt,name=directPath" json:"directPath,omitempty"`
	FileLength        *uint32 `protobuf:"varint,9,opt,name=fileLength" json:"fileLength,omitempty"`
	MediaKeyTimestamp *uint32 `protobuf:"varint,10,opt,name=mediaKeyTimestamp" json:"mediaKeyTimestamp,omitempty"` //optional uint32 int_13    = 13;
}

func (x *Sticker) Reset() {
	*x = Sticker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sticker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sticker) ProtoMessage() {}

func (x *Sticker) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sticker.ProtoReflect.Descriptor instead.
func (*Sticker) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{7}
}

func (x *Sticker) GetMessageUrl() string {
	if x != nil && x.MessageUrl != nil {
		return *x.MessageUrl
	}
	return ""
}

func (x *Sticker) GetFileHash() []byte {
	if x != nil {
		return x.FileHash
	}
	return nil
}

func (x *Sticker) GetEncFileHash() []byte {
	if x != nil {
		return x.EncFileHash
	}
	return nil
}

func (x *Sticker) GetMediaKey() []byte {
	if x != nil {
		return x.MediaKey
	}
	return nil
}

func (x *Sticker) GetMimeType() string {
	if x != nil && x.MimeType != nil {
		return *x.MimeType
	}
	return ""
}

func (x *Sticker) GetWidth() uint32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *Sticker) GetHeight() uint32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *Sticker) GetDirectPath() string {
	if x != nil && x.DirectPath != nil {
		return *x.DirectPath
	}
	return ""
}

func (x *Sticker) GetFileLength() uint32 {
	if x != nil && x.FileLength != nil {
		return *x.FileLength
	}
	return 0
}

func (x *Sticker) GetMediaKeyTimestamp() uint32 {
	if x != nil && x.MediaKeyTimestamp != nil {
		return *x.MediaKeyTimestamp
	}
	return 0
}

type Media struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Media) Reset() {
	*x = Media{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Media) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Media) ProtoMessage() {}

func (x *Media) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Media.ProtoReflect.Descriptor instead.
func (*Media) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{8}
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text         []byte         `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	Grp          *Message_Group `protobuf:"bytes,2,opt,name=grp" json:"grp,omitempty"`
	Image        *Image         `protobuf:"bytes,3,opt,name=image" json:"image,omitempty"`
	Contact      *Contact       `protobuf:"bytes,4,opt,name=contact" json:"contact,omitempty"`
	Url          *Url           `protobuf:"bytes,6,opt,name=url" json:"url,omitempty"`
	Document     *Document      `protobuf:"bytes,7,opt,name=document" json:"document,omitempty"`
	Ptt          *Ptt           `protobuf:"bytes,8,opt,name=ptt" json:"ptt,omitempty"`
	Video        *Video         `protobuf:"bytes,9,opt,name=video" json:"video,omitempty"`
	ContactArray *ContactArray  `protobuf:"bytes,13,opt,name=contactArray" json:"contactArray,omitempty"`
	Sticker      *Sticker       `protobuf:"bytes,26,opt,name=sticker" json:"sticker,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{9}
}

func (x *Message) GetText() []byte {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Message) GetGrp() *Message_Group {
	if x != nil {
		return x.Grp
	}
	return nil
}

func (x *Message) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *Message) GetContact() *Contact {
	if x != nil {
		return x.Contact
	}
	return nil
}

func (x *Message) GetUrl() *Url {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *Message) GetDocument() *Document {
	if x != nil {
		return x.Document
	}
	return nil
}

func (x *Message) GetPtt() *Ptt {
	if x != nil {
		return x.Ptt
	}
	return nil
}

func (x *Message) GetVideo() *Video {
	if x != nil {
		return x.Video
	}
	return nil
}

func (x *Message) GetContactArray() *ContactArray {
	if x != nil {
		return x.ContactArray
	}
	return nil
}

func (x *Message) GetSticker() *Sticker {
	if x != nil {
		return x.Sticker
	}
	return nil
}

type Message_Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Skdm []byte  `protobuf:"bytes,2,opt,name=skdm" json:"skdm,omitempty"` // sender key distribution message
}

func (x *Message_Group) Reset() {
	*x = Message_Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Message_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message_Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message_Group) ProtoMessage() {}

func (x *Message_Group) ProtoReflect() protoreflect.Message {
	mi := &file_Message_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message_Group.ProtoReflect.Descriptor instead.
func (*Message_Group) Descriptor() ([]byte, []int) {
	return file_Message_proto_rawDescGZIP(), []int{9, 0}
}

func (x *Message_Group) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Message_Group) GetSkdm() []byte {
	if x != nil {
		return x.Skdm
	}
	return nil
}

var File_Message_proto protoreflect.FileDescriptor

var file_Message_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x89, 0x04, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x12,
	0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x65, 0x6e, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x53, 0x63, 0x61, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x48, 0x61, 0x73, 0x68, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2c, 0x0a,
	0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x45, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x45, 0x48, 0x61, 0x73, 0x68, 0x22, 0x33, 0x0a, 0x07, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x63,
	0x61, 0x72, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x63, 0x61, 0x72, 0x64,
	0x22, 0x42, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0xf4, 0x03, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x61, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0f, 0x62, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x66, 0x6f, 0x6e, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x66, 0x6f, 0x6e, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x6e,
	0x74, 0x5f, 0x31, 0x30, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x31,
	0x30, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x61, 0x77, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x72, 0x61, 0x77, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x25, 0x0a, 0x0f, 0x77, 0x74, 0x66, 0x5f, 0x33, 0x32, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x32, 0x31, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c,
	0x77, 0x74, 0x66, 0x33, 0x32, 0x42, 0x79, 0x74, 0x65, 0x73, 0x32, 0x31, 0x12, 0x25, 0x0a, 0x0f,
	0x77, 0x74, 0x66, 0x5f, 0x33, 0x32, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x32, 0x32, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x77, 0x74, 0x66, 0x33, 0x32, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x32, 0x32, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x67, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6d, 0x67, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x67, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x69, 0x6d, 0x67, 0x57, 0x69, 0x64, 0x74, 0x68, 0x22, 0xe3, 0x02, 0x0a, 0x08,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x6e,
	0x74, 0x5f, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x69, 0x6e, 0x74, 0x36, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x45, 0x6e, 0x63, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x45, 0x6e, 0x63, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0xc7, 0x02, 0x0a, 0x03, 0x50, 0x74, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x65,
	0x6e, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x65, 0x6e, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2c, 0x0a,
	0x11, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b,
	0x65, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xab, 0x03, 0x0a, 0x05,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1e, 0x0a,
	0x0a, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x24, 0x0a,
	0x0d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x65, 0x6e, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x22, 0xbb, 0x02, 0x0a, 0x07, 0x53, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x65, 0x6e, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c,
	0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66,
	0x69, 0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x4b, 0x65, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x94, 0x01, 0x0a, 0x05, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x22, 0x8a, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x6b, 0x64, 0x6d, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x74,
	0x74, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x10, 0x09, 0x12, 0x11,
	0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x41, 0x72, 0x72, 0x61, 0x79, 0x10,
	0x0d, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x10, 0x1a, 0x22, 0xfa,
	0x02, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x20,
	0x0a, 0x03, 0x67, 0x72, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x03, 0x67, 0x72, 0x70,
	0x12, 0x1c, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x06, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x22,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x12, 0x16, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x04, 0x2e, 0x55, 0x72, 0x6c, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x08, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x03, 0x70, 0x74, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x04,
	0x2e, 0x50, 0x74, 0x74, 0x52, 0x03, 0x70, 0x74, 0x74, 0x12, 0x1c, 0x0a, 0x05, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x31, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x22, 0x0a, 0x07, 0x73, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x53, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x07, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x1a, 0x2b,
	0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x64, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x6b, 0x64, 0x6d, 0x42, 0x06, 0x5a, 0x04, 0x2e,
	0x3b, 0x70, 0x62,
}

var (
	file_Message_proto_rawDescOnce sync.Once
	file_Message_proto_rawDescData = file_Message_proto_rawDesc
)

func file_Message_proto_rawDescGZIP() []byte {
	file_Message_proto_rawDescOnce.Do(func() {
		file_Message_proto_rawDescData = protoimpl.X.CompressGZIP(file_Message_proto_rawDescData)
	})
	return file_Message_proto_rawDescData
}

var file_Message_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_Message_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_Message_proto_goTypes = []interface{}{
	(Media_Type)(0),       // 0: Media.Type
	(*Image)(nil),         // 1: Image
	(*Contact)(nil),       // 2: Contact
	(*ContactArray)(nil),  // 3: ContactArray
	(*Url)(nil),           // 4: Url
	(*Document)(nil),      // 5: Document
	(*Ptt)(nil),           // 6: Ptt
	(*Video)(nil),         // 7: Video
	(*Sticker)(nil),       // 8: Sticker
	(*Media)(nil),         // 9: Media
	(*Message)(nil),       // 10: Message
	(*Message_Group)(nil), // 11: Message.Group
}
var file_Message_proto_depIdxs = []int32{
	2,  // 0: ContactArray.list:type_name -> Contact
	11, // 1: Message.grp:type_name -> Message.Group
	1,  // 2: Message.image:type_name -> Image
	2,  // 3: Message.contact:type_name -> Contact
	4,  // 4: Message.url:type_name -> Url
	5,  // 5: Message.document:type_name -> Document
	6,  // 6: Message.ptt:type_name -> Ptt
	7,  // 7: Message.video:type_name -> Video
	3,  // 8: Message.contactArray:type_name -> ContactArray
	8,  // 9: Message.sticker:type_name -> Sticker
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_Message_proto_init() }
func file_Message_proto_init() {
	if File_Message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_Message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Url); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Document); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ptt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Video); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sticker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Media); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Message_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message_Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Message_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Message_proto_goTypes,
		DependencyIndexes: file_Message_proto_depIdxs,
		EnumInfos:         file_Message_proto_enumTypes,
		MessageInfos:      file_Message_proto_msgTypes,
	}.Build()
	File_Message_proto = out.File
	file_Message_proto_rawDesc = nil
	file_Message_proto_goTypes = nil
	file_Message_proto_depIdxs = nil
}
